Toolchain for positioner analysis
=================================
The general sequence of events is:

#) Positioners are moved on the instrument.

   #) This could be at the Mayall or in the lab.

#) Calculate measured fiber positions from FVC images:

   #) Platemaker, at time of measurement.
   #) Or desimeter, at any time later.

#) Data is selected from the online database (posmovedb), and stored to local CSV files.

#) Analyze / plot.

Moving positioners + measuring
------------------------------
This happens outside of desimeter. The robots are always moved using ``PetalApp.py``, which is an ICS wrapper around ``petal.py``.

    - ``<desi_svn>/code/online/Positioner/PetalApp/<some_tag_or_branch>/python/PetalApp/PetalApp.py``
    - ``<desi_svn>/code/focalplane/plate_control/<some_tag_or_branch>/petal/petal.py``

Depending on the operational circumstance, there will be different high-level scripts which send the requests for which targets to go to, and when to trigger the FVC camera. These are in general:

Night time observations
    - OCS script
    - ``<desi_svn>/code/online/OCS/<some_tag_or_branch>/python/OCS/``

Scripted move sequences
    - ``run_sequence.py``
    - ``<desi_svn>/code/focalplane/plate_control/<some_tag_or_branch>/pecs/``
    
Legacy test scripts (mostly replaced by ``run_sequence.py``)
    - ``arc_calibration.py``, ``grid_calibration.py``, ``xytest.py``, etc

For every move performed, numerous values get stored in the online database (posmovedb). These include:

      #) ``POS_T`` and ``POS_P``, the internally-tracked (theta, phi) angles of each positioner
      
      #) ``OBS_X`` and ``OBS_Y``, the global (x, y) measured position calculated by platemaker
      
      #) ``PTL_X``, ``PTL_Y``, and ``PTL_Z``, the platemaker-measured position, transformed to petal coordinates, using each petal's (x, y, z, alpha, beta, gamma) rigid body position as known to the instrument at the time of measurement
      
      #) ``EXPOSURE_ID`` and ``EXPOSURE_ITER``, index values to identify associated FVC FITS file with that row in posmovedb
      
      #) ``MOVE_CMD``, ``MOVE_VAL1``, ``MOVE_VAL2``, ``LOG_NOTE``, fields that can be parsed to determine what higher level operation was being performed

Anytime a calibration value is changed (such as ``LENGTH_R1``, ``LENGTH_R2``, etc), or indeed any other change of positioner state data, that fact will be recorded in the online database.

Typical test procedure
----------------------
Positioners are tested using pre-defined lists of moves and setup parameters. These are executed by ``run_sequence.py``. Data goes straight into the online DB. Analysis is done offline at any time, using desimeter. The typical steps are:

    #) Locate the ``seq_*.ecsv`` file, defining the test sequence to be performed.
        - These can also be freshly generated by running the script ``pecs/sequence_generator.py``
	- Typical syntax: ``python sequence_generator.py``

    #) Confirm the focal plane / petal hardware, fiber view camera, and online system are all up and running.
        - Not explained here.
	- As of 2020-09-10, information on hardware setup / operation is captured mostly in this google doc: https://docs.google.com/document/d/1auayJzVoZYV_LOhYA4mK8h_oTlYU4pC8JQJgvHVb8Us/edit?usp=sharing
	
    #) Run the test.
        - Code location: ``<desi_svn>/code/focalplane/plate_control/<some_tag_or_branch>/pecs/``
        - Typical syntax: ``python run_sequence.py -i seq_<SOME_TEST>.ecsv --num_corr 2 --prepark posintTP``
	- For numerous other options\*, see help: ``python run_sequence.py --help``
	- Review the test sequence (it will be displayed before anything happens, and you will have a chance to exit).
	- Follow the interactive prompts to define which petals / buses / positioners should be operated.
	- Throughout the test, data is stored in real time to the online DB, as soon as it is available.
	- All output printed to stdout is saved into a log file on disk, verbatim.
	- Between moves, there is a cool-down period (defined by cycle time option). If you need to quit the test midway through, it is *completely safe* to do CTRL-C in the terminal during this cool-down.
	- After the test, note the exposure ID.

    #) Get data from DB.
        - Code location: ``<desimeter>/bin``
	- Example syntax: ``get_posmoves --host beyonce.lbl.gov --port 5432 --password <password> --petal-ids 1 --with-calib --exposure-ids 2679 --pos-ids <optional comma-separated list> -o ~/<your_output_directory>``
	- For numerous other options, see help: ``get_posmoves --help``
	- Many files will be generated, one per positioners. You can restrict this by arguing only a specific list of posids to grab.
	- Note as of 2020-09-10, we have had some issues with ports, when running requests from a computer other than beyonce. A workaround is to log into beyonce and run it like ``/software/products/desimeter-master/bin/get_posmoves``. You may need to first call ``prepare_desimeter``.

    #) Analyze the data.
        - Code location:  ``<desimeter>/bin``
        - Calibrations
	    - ``fit_posparams`` --> ``merge_posparams`` --> ``prepare_posparams_for_instr``
	    - See descriptions below.
	- Performance (e.g. "xy tests")
	    - Example syntax: ``analyze_pos_performance -i M*.csv -o ~/<your_output_directory>``
	    - Plots, histograms, and summary csv files will be produced.
	    - This can be run really on any combination of data, not just an xy test. You could include night-time observations, for example. Just include the exposure-ids you want in the previous step, when you grabbed the data from the DB with ``get_posmoves``.
	
\* ``run_sequence.py`` has numerous options. These include:
    - anticollision mode
    - phi range limits
    - fvc match radius
    - auto-disabling of unmatched positioners
    - auto-updating of internally-tracked (theta, phi) based on fvc measurements
    - dry run (no actual movements of hardware)
    - cycle tiem between moves
    - number of fvc images per measurement
    - number of correction moves per target
    - number of best / worst positioners to list at stdout, for each measured target
    - whether to park the positioners at a standard location before / after the test

Re-analysis of fiber positions with desimeter
---------------------------------------------
FVC fits files can be re-analyzed at any time after the fact using desimeter. Also see: `<posmov.rst>`_

Retreiving data from the online database
----------------------------------------
The posmovedb for the instrument at the Mayall is hosted at KPNO, and regularly mirrored to NERSC. There is a similar posmovedb hosted at LBNL on the beyonce server, just for test petals there.

As of 2020-06-16, desimeter provides the following tools:

* ``get_posmov_fvc_data`` ... Matches timestamps between posmovedb and fvc FITS files, saves csv combining posmovedb rows with desimeterâ€™s analysis of the measured positions.

* ``get_posmoves`` ... Retrieves measured move values values ``PTL_X_*``, ``PTL_Y_*`` etc posmovedb, saves csv.

* ``get_posparams`` ... Retrieves calibration values like ``LENGTH_*``, ``OFFSET_*`` etc from posmovedb, saves csv.

Analysis of positioning performance
-----------------------------------
As of 2020-09-10, desimeter provides the following tools:

* ``analyze_pos_performance`` ... Calculates positioning errors move-by-move. Generates plots, histograms, and csv files summarizing performance.

* ``fit_posparams`` ... Fits positioner calibration parameters, by comparing measured (x,y) to internally-tracked (theta,phi).

* ``plot_posparams`` ... Plots results from fit_posparams per positioner. Also plots cumulative positioner errors over time, as calculated when performing those best-fits.

Preparation of calibration values for use on the instrument
-----------------------------------------------------------

As of 2020-06-16, desimeter provides the following tool:

* ``prepare_posparams_for_instr`` ... Takes a csv file produced by fit_posparams and interactively guides user through validating and selecting safe values for use on instrument. Generates an output csv file which can be ingested by ``pecs/set_calibrations.py``

The procedure for measuring and updating calibrations is given in DESI-5732.

As on overview of the role desimter plays in this process, those basic steps are:

1. ``get_posmoves`` ... get tracked (t,p) and measured (x,y) from online DB

2. ``fit_posparams`` ... best-fit calib params which map (t,p) to (x,y)

3. ``merge_posparams`` ... gather fit result files into one table

4. ``prepare_posparams_for_instr`` ... validate parameters and generate modified table

Finally after desimeter has prepared the new calibration parameters, we use ``pecs/set_calibrations.py`` (managed in DESI's svn repo, *not* desihub), which pushes data to the online DB.
