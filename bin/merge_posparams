#!/usr/bin/env python

"""
utility script to merge individual posparams fits back into a single table,
using the last entry from each of the individual fits
"""

import argparse
parser = argparse.ArgumentParser(
    usage = "merge_posparams -i M*.csv -o posparams.csv",
    description = 'Merge individual M*.csv posparams files into a single table, '
                  'optionally also merging metrology information')
parser.add_argument("-i", "--input", type=str, nargs='*', required=True,
                    help="individual posparams fit files, regex expression ok")
parser.add_argument("-o", "--output", type=str, required=True,
                    help="output merged table file")
parser.add_argument("--no-check", action="store_true",
                    help="do not check indices agains metrology")
parser.add_argument("--no-metrology", action="store_true",
                    help="do not merge indices from metrology if missing")
args = parser.parse_args()

import os, sys
import numpy as np
from astropy.table import Table, vstack
import desimeter.io
from desimeter.log import get_logger

filenames = []
if os.name == 'nt':  # windows needs extra help with file path parsing
    import glob
    for path_str in args.input:
        globbed = glob.glob(path_str)
        filenames += globbed
else:
    filenames = args.input

log = get_logger()
log.info(f'Loading {len(filenames)} individual posparams files')

tables=list()
for filename in filenames:
    t=Table.read(filename)
    if len(t)==0 : continue


    if "MOVE_CMD" in t.dtype.names :
        if t["MOVE_CMD"].dtype == "int64"  : t["MOVE_CMD"]=np.repeat("none",len(t))
        #t.remove_column("MOVE_CMD")
    if "MOVE_VAL1" in t.dtype.names :
        if t["MOVE_VAL1"].dtype == "int64" : t["MOVE_VAL1"]=np.repeat("none",len(t))
    if "MOVE_VAL2" in t.dtype.names :
        if t["MOVE_VAL2"].dtype == "int64" : t["MOVE_VAL2"]=np.repeat("none",len(t))

    tables.append(t)

"""
# I am adding myself possible missing columns in some tables.
dtypes=dict()
for table in tables :
    for k in table.dtype.names :
        if not k in dtypes.keys() :
            dtypes[k] = table.dtype[k]
for table in tables :
    for k in dtypes.keys() :
        if not k in table.dtype.names :
            table.add_column(Column(name=k,length=len(table),dtype=dtypes[k]))
"""


posparams = vstack(tables)
if "LOCATION" not in posparams.dtype.names :
    if "PETAL_LOC" in posparams.dtype.names and "DEVICE_LOC" in posparams.dtype.names :
        posparams["LOCATION"]=1000*np.array(list(posparams["PETAL_LOC"])).astype(int)+np.array(list(posparams["DEVICE_LOC"])).astype(int)

device_id_key="DEVICE_ID"
if not device_id_key in posparams.dtype.names : # add device id because that's how it's called elsewhere in the code
    device_id_key = "POS_ID"
if not device_id_key in posparams.dtype.names : # add device id because that's how it's called elsewhere in the code
    log.error("no POS_ID nor DEVICE_ID???")
    sys.exit(12)


if "DEVICE_LOC" not in posparams.dtype.names and (not args.no_metrology) :
    # merge metrology info

    metrology = desimeter.io.load_metrology()
    pid2ind = {pid:i for i,pid in enumerate(metrology["DEVICE_ID"])}
    npos=len(posparams)
    keys = ["LOCATION","DEVICE_LOC","PETAL_LOC","PETAL_ID"]
    for k in keys :
        posparams[k]=-1*np.ones(npos,dtype=int)
    for j,pid in enumerate(posparams[device_id_key]) :
        if pid in pid2ind :
            i=pid2ind[pid]
            for k in keys :
                posparams[k][j]=metrology[k][i]

if not args.no_check and not args.no_metrology :

    metrology = desimeter.io.load_metrology()
    pid2ind = {pid:i for i,pid in enumerate(metrology["DEVICE_ID"])}

    has_error = False
    for j,pid in enumerate(posparams[device_id_key]) :
        if not pid in pid2ind :
            log.warning("DEVICE_ID={} not in metrology table".format(pid))
            continue
        i=pid2ind[pid]
        for k in ["DEVICE_LOC","LOCATION","PETAL_LOC","PETAL_ID"] :
            if posparams[k][j] != metrology[k][i] :
                log.error("for {}={} {}={} != {} from metrology".format(device_id_key,pid,k,posparams[k][j],metrology[k][i]))
                has_errors = True
    if has_error :
        sys.exit(12)

#- Write output
posparams.write(args.output, overwrite=True)
log.info(f'Wrote {args.output}')
