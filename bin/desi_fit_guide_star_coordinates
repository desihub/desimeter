#!/usr/bin/env python

import argparse
import sys,os
import numpy as np
import fitsio

from desimeter.log import get_logger
from desimeter.fieldmodel import FieldModel
from desimeter.time import mjd2lst
from desimeter.io import read_hexrot_deg

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Fit guide star catalog to derive a field model (pointing, field rotation, scale)""")
parser.add_argument('-i','--infile', type = str, default = None, required = True,
                    help = 'path to a GFA catalog file, fits or csv, like ""')
parser.add_argument('-o','--outfile', type = str, default = None, required = True,
                    help = 'path to output json file with transformation parameters')
parser.add_argument('--fits-header', type = str, default = None, required = True,
                    help = 'path to file with fits header to read time and sky coordinates')
parser.add_argument('--plot', action = 'store_true')

args  = parser.parse_args()
log   = get_logger()

fm = FieldModel()

header  = fitsio.read_header(args.fits_header,0)
if not "TARGTRA" in header :
    log.warning("no TARGTRA in header of HDU 0, try HDU 1")
    header  = fitsio.read_header(args.fits_header,1)
    if not "TARGTRA" in header :
        log.error("no TARGTRA in headers of HDU 0 or 1 of file {}".format(args.fits_header))
        sys.exit(12)


fm.ra  = header["TARGTRA"]
fm.dec = header["TARGTDEC"]
fm.expid = header["EXPID"]
fm.hexrot_deg = read_hexrot_deg(header)

fm.adc1 = header["ADC1PHI"]
fm.adc2 = header["ADC2PHI"]

catalog = fm.read_guide_stars_catalog(args.infile)

# MJD and LST are needed for sky transform
fm.mjd    = np.mean(catalog["mjd_obs"])
fm.lst    = mjd2lst(fm.mjd)

fm.fit_tancorr(catalog)

# save it
with open(args.outfile, 'w') as file:
    file.write(fm.tojson())
print("wrote",args.outfile)


if args.plot :
    import matplotlib.pyplot as plt

    t=catalog
    xgfa=t["xcentroid"]
    ygfa=t["ycentroid"]
    pet=t["petal_loc"]

    # re-read the model to also test the I/O
    with open(args.outfile) as file :
        fm = FieldModel.fromjson(file.read())

    xfp,yfp = fm.all_gfa2fp(xgfa,ygfa,pet)
    ra2,dec2=fm.fp2radec(xfp,yfp)

    ra=t["ra_gaia"]
    dec=t["dec_gaia"]

    ii=(xfp!=0)
    dy=dec2[ii]-dec[ii]
    dx=(ra2[ii]-ra[ii])*np.cos(dec[ii]/180*np.pi)
    dr2=dx**2+dy**2
    rms=np.sqrt(np.mean(dr2))
    print("rms (GAIA RA,Dec - Measurement) = {:3.2f} arcsec".format(rms*3600.))

    plt.figure("sky")
    plt.plot(-ra,dec,"o",label="GAIA")
    plt.plot(-ra2,dec2,"x",label="Measurements")
    plt.xlabel("-RA (deg)")
    plt.ylabel("Dec (deg)")
    plt.legend()
    plt.show()
