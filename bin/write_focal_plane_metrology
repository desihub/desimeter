#!/usr/bin/env python


import argparse
import sys,os
import numpy as np
import yaml
from desimeter.log import get_logger
from pkg_resources import resource_filename
from astropy.table import Table
from desimeter.transform.ptl2fp import apply_ptl2fp

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Combine petal metrology and petal alignment data into a single CSV file""")

parser.add_argument('-o','--outfile', type = str, default = None, required = True, help = 'output csv file')


args  = parser.parse_args()
log = get_logger()

log.info("reading petal alignment data")
filename = resource_filename('desimeter',"data/petal-alignments.yaml")
log.info(" in {}".format(filename))

ifile=open(filename)
petal_alignment_dict = yaml.safe_load(ifile)
ifile.close()

log.info("reading petal metrology")
filename = resource_filename('desimeter',"data/UMT-DESI-5421.csv")
log.info(" in {}".format(filename))
spots = Table.read(filename,format="csv")
if 'col0' in spots.dtype.names :
    spots.remove_column('col0')

print("metrology columns:",spots.dtype.names)


# force int type
spots["PETAL_LOC"]=spots["PETAL_LOC"].astype(int)
pids=np.zeros(spots["PINHOLE_ID"].size,dtype=int)
for i,pid in enumerate(spots["PINHOLE_ID"]) :
    pid=str(pid)
    if pid[0]=="M":
        pids[i]=int(pid[1])
    else :
        try :
            pids[i]=int(pid)
        except ValueError as e :
            pids[i]=0
spots["PINHOLE_ID"]=pids


r=np.sqrt(spots["X_PTL"]**2+spots["Y_PTL"]**2)
ii=np.where( r < 1.)[0]
for i in ii :
    log.warning("BAD DATA {} {} type={} xptl={} yptl={} xmnt={} ymnt={}".format(spots["PETAL_LOC"][i],spots["DEVICE_LOC"][i],spots["DEVICE_TYPE"][i],spots["X_PTL"][i],spots["Y_PTL"][i],spots["X_MNT"][i],spots["Y_MNT"][i]))
spots=spots[:][r>1.] # exclude bad data??

spots = apply_ptl2fp(spots,petal_alignment_dict)

spots["LOCATION"] = spots["PETAL_LOC"]*1000+spots["DEVICE_LOC"]

log.info("applying patch")
filename = resource_filename('desimeter',"data/fp-metrology-patch.csv")
log.info(" from {}".format(filename))
patch = Table.read(filename,format="csv")
for i in range(patch["X_FP"].size) :
    selection=(spots["LOCATION"]==patch["LOCATION"][i])&(spots["PINHOLE_ID"]==patch["PINHOLE_ID"][i])
    jj=np.where(selection)[0]
    if jj.size == 0 :
        log.info("Adding LOCATION={} PINHOLE_ID={}".format(patch["LOCATION"][i],patch["PINHOLE_ID"][i]))
        spots.add_row(patch[:][i])
    else :
        j=jj
        log.info("Replacing LOCATION={} PINHOLE_ID={}".format(patch["LOCATION"][i],patch["PINHOLE_ID"][i]))
        spots[:][j] = patch[:][i]

        
spots.write(args.outfile,format='csv',overwrite=True)

log.info("wrote {}".format(args.outfile))



