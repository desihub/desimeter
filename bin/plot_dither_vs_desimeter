#!/usr/bin/env python

import os,sys
import fitsio
import astropy.io.fits as pyfits
from astropy.table import Table
import matplotlib.pyplot as plt
import numpy as np
from astropy.stats import sigma_clipped_stats

from desimeter.transform.radec2tan import hadec2xy
from desimeter.simplecorr import SimpleCorr

import argparse



parser = argparse.ArgumentParser(description='Compare desimeter & dither fiber positions')
parser.add_argument('dither_file', type=str, help='dither file name')
parser.add_argument('fvc_file', type=str, help='desi_fvc_proc file name')
parser.add_argument('fiberassign_file', type=str, help='fiberassign file name')
parser.add_argument('expid', type=int, help='expid to use from dither file')
parser.add_argument('--pdf', '-p', type=str, default=None, help='file name for pdf output')
args = parser.parse_args()

def myquiver(x1,y1,x2,y2,title=None) :
    darcsec=0.5
    x0=-1.5 ; y0=1.7
    x1b=np.append(x1,x0)
    y1b=np.append(y1,y0)
    x2b=np.append(x2,x0+darcsec/3600.)
    y2b=np.append(y2,y0)

    dx=(x2b-x1b)
    dy=(y2b-y1b)
    plt.quiver(x1b,y1b,dx,dy)
    dr=np.sqrt(dx[:-1]**2+dy[:-1]**2)
    # rms2d=np.sqrt(np.mean(dr**2))
    mn, med, sig = sigma_clipped_stats(dr**2, sigma=5)
    rms2d = np.sqrt(mn)
    plt.text(-1.3,y0,"{:2.1f}''".format(darcsec),fontsize=10,horizontalalignment="left",verticalalignment="center")
    text="rms$_{2D}$ = %3.2f''"%(rms2d*3600.)
    plt.text(1.6,y0,text,fontsize=10,horizontalalignment="right",verticalalignment="center")
    text="rms 2D = %3.2f arcsec"%(rms2d*3600.)
    if title :
        print("%30s %s"%(title,text))
    else :
        print(text)


quiver_units="width"
quiver_scale=15.
def arrow() :
    xarrow=-0.025
    dxarrow=1.#arcsec
    plt.quiver(xarrow,-0.025,dxarrow,0.,color="black",units=quiver_units,scale=quiver_scale)
    plt.text(xarrow,-0.029,"{} arcsec".format(dxarrow))

def text(blabla) :
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    plt.text(0.029,-0.029,blabla,fontsize=8, bbox=props,verticalalignment='bottom', horizontalalignment='right')


dither_file = args.dither_file
fvc_file = args.fvc_file
fiberassign_file = args.fiberassign_file
#coordinates_file = args.coordinates_file

# Eddie's dithers
#######################################################################
t=fitsio.read(dither_file)
if args.expid is None:
    i=0
else:
    ind = np.flatnonzero(t['expid'][0, :] == args.expid)
    if len(ind) > 0:
        i = ind[0]
    else:
        raise ValueError(f'could not find expid {args.expid} in dither file.')

err=np.sqrt(t['dxfiboff'][:,i]**2+t['dyfiboff'][:,i]**2)
roff=np.sqrt(t['xfiboff'][:,i]**2+t['yfiboff'][:,i]**2)
dchi2frac = ((t['chi2fibnull']-t['chi2fib'])/(
    t['chi2fibnull']+(t['chi2fibnull'] == 0)))[:, i]
jj=np.where((err<0.5)&(roff<4.)&(dchi2frac > 0.9))[0]

dither_ra    = t['fiber_ditherfit_ra'][jj,i]
dither_dec   = t['fiber_ditherfit_dec'][jj,i]
dither_fiber = t['fiber'][jj,i].astype(int)
print("number of valid targets from dither analysis = {}".format(len(dither_ra)))

# desimeter RA Dec
#######################################################################
fvc=Table.read(fvc_file)
ii=(fvc["RA"]!=0)
fvc=fvc[ii]

# fiberassign
#######################################################################
fiberassign=Table.read(fiberassign_file,1)
head = fitsio.read_header(fiberassign_file)
dico = { loc : i for i,loc in enumerate(fiberassign["LOCATION"])}

fvc_indices=[]
fiberassign_indices=[]
for i,loc in enumerate(fvc["LOCATION"]) :
    if loc in dico :
        fvc_indices.append(i)
        fiberassign_indices.append(dico[loc])

fvc=fvc[fvc_indices]
fiberassign=fiberassign[fiberassign_indices]

# re-address the dither results to map desimeter table which has location
#######################################################################
dico = { fiber : i for i,fiber in enumerate(dither_fiber) }

fvc_indices=[]
dither_indices=[]
for i,fiber in enumerate(fiberassign["FIBER"]):
    if fiber in dico :
        fvc_indices.append(i)
        dither_indices.append(dico[fiber])

fvc=fvc[fvc_indices]
fiberassign=fiberassign[fvc_indices]
dither_ra=dither_ra[dither_indices]
dither_dec=dither_dec[dither_indices]


"""
    # coord file
    #######################################################################
    coord=Table.read(coordinates_file)
    print(coord.dtype.names)
    cloc=1000*np.array(coord['PETAL_LOC'])+np.array(coord["DEVICE_LOC"])
    dico = { loc : i for i,loc in enumerate(cloc)}

    #fvc_indices=[]
    coord_indices=[]
    for i,loc in enumerate(fvc["LOCATION"]) :
        if loc in dico :
            #fvc_indices.append(i)
            coord_indices.append(dico[loc])
        else :
            print("error")
            sys.exit(12)
    coord=coord[coord_indices]
"""


tel_ra=head["REQRA"]
tel_dec=head["REQDEC"]
desimeter_x,desimeter_y=hadec2xy(-fvc["RA"]+tel_ra,fvc["DEC"],0,tel_dec)
target_x,target_y=hadec2xy(-fiberassign["TARGET_RA"]+tel_ra,fiberassign["TARGET_DEC"],0,tel_dec)
dither_x,dither_y=hadec2xy(-dither_ra+tel_ra,dither_dec,0,tel_dec)

# fit a transform to adjust desimeter to the dither results
corr=SimpleCorr()
corr.fit(desimeter_x,desimeter_y,dither_x,dither_y)
desimeter_x_bis , desimeter_y_bis = corr.apply(desimeter_x,desimeter_y)

residual_ha_offset_rad     = corr.dx
residual_ha_offset_arcsec  = corr.dx*180*3600./np.pi
residual_dec_offset_rad    = corr.dy
residual_dec_offset_arcsec = corr.dy*180*3600./np.pi
residual_rotation_deg      = corr.rot_deg -360*(corr.rot_deg>180)
residual_rotation_arcsec   =  residual_rotation_deg*3600.

print("residual scale along HA       = 1{:+4.2g}".format(corr.sxx-1.))
print("residual scale along Dec      = 1{:+4.2g}".format(corr.syy-1.))
print("residual pointing offset dHA  = {:4.2f} arcsec".format(residual_ha_offset_arcsec))
print("residual pointing offset dDec = {:4.2f} arcsec".format(residual_dec_offset_arcsec))
print("residual rotation             = {:4.2f} arcsec".format(residual_rotation_arcsec))


# from radian to degree
scale=180/np.pi
desimeter_x *= scale
desimeter_y *= scale
target_x *= scale
target_y *= scale
dither_x *= scale
dither_y *= scale
desimeter_x_bis *= scale
desimeter_y_bis *= scale

plt.figure(figsize=(8,8),num="dither-{}".format(args.expid))

title="desimeter(guide+fvc)-target"
plt.subplot(221,title=title)
myquiver(target_x,target_y,desimeter_x,desimeter_y,title=title)

title="dither-target"
plt.subplot(222,title=title)
myquiver(target_x,target_y,dither_x,dither_y,title=title)

title="desimeter(guide+fvc)-dither"
plt.subplot(223,title=title)
myquiver(dither_x,dither_y,desimeter_x,desimeter_y,title=title)

title="transformed(desimeter) -dither"
plt.subplot(224,title=title)
myquiver(dither_x,dither_y,desimeter_x_bis,desimeter_y_bis,title=title)

plt.suptitle(args.expid)
plt.tight_layout()
if args.pdf is not None:
    plt.savefig(args.pdf)
else:
    plt.show()
