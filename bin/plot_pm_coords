#!/usr/bin/env python

import os
import numpy as np
import sys
import fitsio
from   astropy.table import Table
import matplotlib.pyplot as plt
import argparse

from desimeter.transform.radec2tan import hadec2xy,hadec2altaz
from desimeter.io import read_hexrot_deg
from desimeter.fiberassign import fiberassign_radec2xy_cs5,fiberassign_radec2xy_flat


def measure_fieldrot_deg(ha,dec,tel_ha,tel_dec,xfp_mm,yfp_mm) :

    ok = (~(np.isnan(ha*dec*xfp_mm*yfp_mm)))&(xfp_mm**2+yfp_mm**2>10**2)
    x2,y2=hadec2xy(ha[ok],dec[ok],tel_ha,tel_dec) # rad
    return np.rad2deg(np.mean((yfp_mm[ok]*x2-xfp_mm[ok]*y2)/np.sqrt((xfp_mm[ok]**2+yfp_mm[ok]**2)*(x2**2+y2**2))))


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""FVC image processing""")
parser.add_argument('-i','--infile', type = str, default = None, required = True,
                    help = 'path to a coordinates files')
parser.add_argument('--ha', type = float, default = None, required = False,
                    help = 'specify a different HA than the one in the files')
parser.add_argument('-o','--outfile', type = str, default = None, required = False ,
                    help = 'output table where platemaker and desimeter are saved for subsequent analysis')
parser.add_argument('--batch', action = 'store_true' ,
                    help = 'no display, exist after writing the output file')

args = parser.parse_args()

# from https://desi.lbl.gov/trac/wiki/FPS/PositionerFlags
mbit={}
mbit["CTRLDISABLED"]=2**16
mbit["FIBERBROKEN"]=2**17
mbit["COMERROR"]=2**18
mbit["OVERLAP"]=2**19
mbit["FROZEN"]=2**20
mbit["UNREACHABLE"]=2**21
mbit["NONFUNCTIONAL"]=2**24
mbit["REJECTED"]=2**25


filename=args.infile

coord=Table.read(filename,1)
#chead=read_header(filename)

# see documentation in


obsfilename=filename.replace("coordinates","desi").replace(".fits",".fits.fz")
head=fitsio.read_header(obsfilename,1)
tileid=head["TILEID"]

fafilename=os.path.join(os.path.dirname(filename),"fiberassign-{:06d}.fits.gz".format(tileid))
fatable=Table.read(fafilename,1)
fahead=fitsio.read_header(fafilename)

tile_fieldrot=fahead["FIELDROT"]

hexrot_deg = read_hexrot_deg(head)
hexrot_deg = 0.
expid=head["EXPID"]

tile_ra=head["TILERA"]
tile_dec=head["TILEDEC"]
mjd=head["MJD-OBS"]
obsha=head["MOUNTHA"]
if args.ha is not None :
    ha=float(args.ha)
else :
    ha=obsha+0.

adc1=head["ADC1PHI"]
adc2=head["ADC2PHI"]
adc1=None
adc2=None


alt,az=hadec2altaz(ha,tile_dec)




ok=~(np.isnan(coord["FIBER_RA"])|np.isnan(coord["FIBER_DEC"])|np.isnan(coord["FIBER_X"])|np.isnan(coord["FIBER_Y"])|(coord["FIBER_X"]==0))
coord=coord[ok]

#print(coord.dtype.names)
cloc=np.array(coord["PETAL_LOC"],dtype=int)*1000+np.array(coord["DEVICE_LOC"],dtype=int)

floc=np.array(fatable["PETAL_LOC"],dtype=int)*1000+np.array(fatable["DEVICE_LOC"],dtype=int)
fmap={l:i for i,l in enumerate(floc)}
ii=[fmap[l] for l in cloc]
fatable=fatable[ii]
sky=(fatable["OBJTYPE"]=="SKY")
other=(fatable["OBJTYPE"]=="")|(fatable["OBJTYPE"]=="BAD")

ra=coord["TARGET_RA"]
dec=coord["TARGET_DEC"]
xpm=coord["REQ_X_1"]
ypm=coord["REQ_Y_1"]
xfa=coord["FA_X"]
yfa=coord["FA_Y"]
flags=coord["FLAGS_COR_1"]

flagged=np.repeat(False,flags.shape)
for k in ["OVERLAP","FROZEN","UNREACHABLE","CTRLDISABLED","COMERROR","NONFUNCTIONAL","REJECTED"] :
    flagged |= (coord["FLAGS_COR_1"]&mbit[k]>0)
flagged&=(fatable["OBJTYPE"]=="TGT")

print("verification: rms(FA_X-FIBERASSIGN_X)=",np.std(fatable["FIBERASSIGN_X"]-coord["FA_X"]),"rms(FA_Y-FIBERASSIGN_Y)=",np.std(fatable["FIBERASSIGN_Y"]-coord["FA_Y"]))

# compute focal plane coordinates using desimeter
xfp,yfp = fiberassign_radec2xy_cs5(ra,dec,tile_ra,tile_dec,tile_mjd=mjd,tile_ha=ha,tile_fieldrot=tile_fieldrot,adc1=adc1,adc2=adc2)

if args.outfile is not None :
    ot=Table()
    dx=xfp-xpm
    dy=yfp-ypm
    offset=np.sqrt(dx**2+dy**2)
    ii=~(flagged)&(offset<0.1)
    ot["X_PM"]=xpm[ii]
    ot["Y_PM"]=ypm[ii]
    ot["X_DM"]=xfp[ii]
    ot["Y_DM"]=yfp[ii]
    ot.write(args.outfile,overwrite=True)
    print("wrote",args.outfile)

if args.batch :
    sys.exit(0)


# simply to test the routine
xflat,yflat = fiberassign_radec2xy_flat(ra,dec,tile_ra,tile_dec,tile_mjd=mjd,tile_ha=ha,tile_fieldrot=tile_fieldrot,adc1=adc1,adc2=adc2)

# need to measure the field rotation in DM and rotate to the design field rot
dm_fieldrot = measure_fieldrot_deg(-ra,dec,-tile_ra,tile_dec,xfp,yfp)
fa_fieldrot = measure_fieldrot_deg(-ra,dec,-tile_ra,tile_dec,xfa,yfa)
pm_fieldrot = measure_fieldrot_deg(-ra,dec,-tile_ra,tile_dec,xpm,ypm)
print("hexapod rot   = {:3.0f} arcsec".format(hexrot_deg*3600))
print("DM   fieldrot = {:3.0f} arcsec".format(dm_fieldrot*3600))
print("PM   fieldrot = {:3.0f} arcsec".format(pm_fieldrot*3600))
print("TILE fieldrot = {:3.0f} arcsec".format(tile_fieldrot*3600))
print("FA   fieldrot = {:3.0f} arcsec".format(fa_fieldrot*3600))

dx=(xfp-xpm)
dy=(yfp-ypm)
offset=np.sqrt(dx**2+dy**2)
maxoffset=1.
ok=(fatable["OBJTYPE"]=="TGT")&(~flagged)
good=(fatable["OBJTYPE"]=="TGT")&(offset<maxoffset)&(~flagged)
bad=(fatable["OBJTYPE"]=="TGT")&(offset>=maxoffset)&(~flagged)

print("----------------------------------------")
for ot in np.unique(fatable["OBJTYPE"]) :
    print("Number of OBJTYPE='{}': {}".format(ot,np.sum(fatable["OBJTYPE"]==ot)))
print("----------------------------------------")
for k in ["OVERLAP","FROZEN","UNREACHABLE","COMERROR","REJECTED"] : #,"NONFUNCTIONAL"] :
    ii=(coord["FLAGS_COR_1"]&mbit[k]>0)
    print("Number of {}:{}".format(k,np.sum(ii)))
ii=(coord["FLAGS_COR_1"]&mbit["CTRLDISABLED"]>0)&(coord["FLAGS_COR_1"]&mbit["NONFUNCTIONAL"]==0)
print("Number of CTRLDISABLED but FUNCTIONAL:{}".format(np.sum(ii)))
print("----------------------------------------")

rmsx=np.sqrt(np.mean(dx[good]**2))
rmsy=np.sqrt(np.mean(dy[good]**2))
print("DM-PM rms,min,max dx={:4.3f},{:4.3f},{:4.3f} dy={:4.3f},{:4.3f},{:4.3f}, 95% with offset<{:4.3f}".format(rmsx,np.min(dx[ok]),np.max(dx[ok]),rmsy,np.min(dy[ok]),np.max(dy[ok]),np.quantile(offset[ok],0.95)))


quiver_units="width"
quiver_scale=1.5
showflagged=True

def arrow(ax) :
    xarrow=-410
    yarrow=-400
    dxarrow=0.1 #mm
    ax.quiver(xarrow,yarrow,dxarrow,0.,color="black",units=quiver_units,scale=quiver_scale)
    ax.text(xarrow+70,yarrow,"{} mm".format(dxarrow),fontsize="small",verticalalignment="center",horizontalalignment="left")

fig, axs = plt.subplots(1, 3, constrained_layout=True,num=str(expid),figsize=(14,5))
title="expid={} tileid={}".format(expid,tileid)
if args.ha is None :
   title+=" HA={:3.1f} (deg) ALT={:3.1f}".format(ha,alt)
else :
    title+=" HA(obs)={:3.1f} deg HA(DM)={:3.1f} deg".format(obsha,ha)
fig.suptitle(title,fontsize=16)
axs[0].set_title("DM-PM")

badcolor="gray"
badalpha=0.5
skycolor="red"
skyalpha=0.5
flaggedcolor="purple"
flaggedalpha=0.5
othercolor="orange"
otheralpha=0.5

axs[0].quiver(xpm[good],ypm[good],dx[good],dy[good],units=quiver_units,scale=quiver_scale)
axs[0].quiver(xpm[bad],ypm[bad],dx[bad],dy[bad],units=quiver_units,scale=quiver_scale,color=badcolor,linewidth=1,alpha=badalpha)
axs[0].quiver(xpm[sky],ypm[sky],dx[sky],dy[sky],units=quiver_units,scale=quiver_scale,color=skycolor,alpha=skyalpha)
axs[0].quiver(xpm[other],ypm[other],dx[other],dy[other],units=quiver_units,scale=quiver_scale,color=othercolor,alpha=otheralpha)
if showflagged: axs[0].quiver(xpm[flagged],ypm[flagged],dx[flagged],dy[flagged],units=quiver_units,scale=quiver_scale,color=flaggedcolor,alpha=flaggedalpha)

axs[0].text(-410,420,"for offset<{}\nrms(x)={:4.3f}\nrms(y)={:4.3f}".format(maxoffset,rmsx,rmsy),verticalalignment="top",fontsize="small")
arrow(axs[0])

for k in ["OVERLAP","FROZEN","UNREACHABLE","COMERROR","REJECTED"] : #,"NONFUNCTIONAL"] :
    ii=(coord["FLAGS_COR_1"]&mbit[k]>0)
    if np.sum(ii) > 0 :
        axs[0].plot(xpm[ii],ypm[ii],".",label=k)
ii=(coord["FLAGS_COR_1"]&mbit["CTRLDISABLED"]>0)&(coord["FLAGS_COR_1"]&mbit["NONFUNCTIONAL"]==0)
if np.sum(ii) > 0 :
    axs[0].plot(xpm[ii],ypm[ii],".",label="CTRLDISABLED but FUNCTIONAL")
axs[0].legend(fontsize="small",loc="upper right",title="Flagged (except NONFUNCTIONAL)")

dx2=(xfa-xpm)
dy2=(yfa-ypm)
offset=np.sqrt(dx2**2+dy2**2)
ok=(fatable["OBJTYPE"]=="TGT")&(~flagged)
good=(fatable["OBJTYPE"]=="TGT")&(offset<maxoffset)&(~flagged)
bad=(fatable["OBJTYPE"]=="TGT")&(offset>=maxoffset)&(~flagged)
rmsx2=np.sqrt(np.mean(dx2[good]**2))
rmsy2=np.sqrt(np.mean(dy2[good]**2))
#print("FA-PM rms,min,max dx={:4.3f},{:4.3f},{:4.3f} dy={:4.3f},{:4.3f},{:4.3f} max offset={:4.3f}".format(rmsx2,np.min(dx2[good]),np.max(dx2[good]),rmsy2,np.min(dy2[good]),np.max(dy2[good]),np.max(offset[ok])))
print("FA-PM rms,min,max dx={:4.3f},{:4.3f},{:4.3f} dy={:4.3f},{:4.3f},{:4.3f}, 95% with offset<{:4.3f}".format(rmsx2,np.min(dx2[good]),np.max(dx2[good]),rmsy2,np.min(dy2[good]),np.max(dy2[good]),np.quantile(offset[ok],0.95)))
#plt.subplot(122,title="FA-PM rms x,y={:4.3f},{:4.3f}".format(rmsx2,rmsy2))
axs[1].set_title("FA-PM")
axs[1].quiver(xpm[good],ypm[good],dx2[good],dy2[good],units=quiver_units,scale=quiver_scale)
axs[1].quiver(xpm[bad],ypm[bad],dx2[bad],dy2[bad],units=quiver_units,scale=quiver_scale,color=badcolor,linewidth=1,alpha=badalpha,label="offset>{}".format(maxoffset))
axs[1].quiver(xpm[sky],ypm[sky],dx2[sky],dy2[sky],units=quiver_units,scale=quiver_scale,color=skycolor,alpha=skyalpha,label="OBJTYPE='SKY'")
axs[1].quiver(xpm[other],ypm[other],dx2[other],dy2[other],units=quiver_units,scale=quiver_scale,color=othercolor,alpha=otheralpha,label="OBJTYPE='' or 'BAD'")
if showflagged: axs[1].quiver(xpm[flagged],ypm[flagged],dx2[flagged],dy2[flagged],units=quiver_units,scale=quiver_scale,color=flaggedcolor,alpha=flaggedalpha,label="FLAGGED")

axs[1].text(-410,420,"for offset<{}\nrms(x)={:4.3f}\nrms(y)={:4.3f}".format(maxoffset,rmsx2,rmsy2),verticalalignment="top",fontsize="small")
arrow(axs[1])

axs[1].legend(loc="upper right",fontsize="small")

dx3=(xfp-xfa)
dy3=(yfp-yfa)
offset=np.sqrt(dx3**2+dy3**2)
ok=(fatable["OBJTYPE"]=="TGT")&(~flagged)
good=(fatable["OBJTYPE"]=="TGT")&(offset<maxoffset)&(~flagged)
bad=(fatable["OBJTYPE"]=="TGT")&(offset>=maxoffset)&(~flagged)
rmsx3=np.sqrt(np.mean(dx3[good]**2))
rmsy3=np.sqrt(np.mean(dy3[good]**2))
print("DM-FA rms,min,max dx={:4.3f},{:4.3f},{:4.3f} dy={:4.3f},{:4.3f},{:4.3f}, 95% with offset<{:4.3f}".format(rmsx3,np.min(dx3[good]),np.max(dx3[good]),rmsy3,np.min(dy3[good]),np.max(dy3[good]),np.quantile(offset[ok],0.95)))
axs[2].set_title("DM-FA")
axs[2].quiver(xpm[good],ypm[good],dx3[good],dy3[good],units=quiver_units,scale=quiver_scale)
axs[2].quiver(xpm[bad],ypm[bad],dx3[bad],dy3[bad],units=quiver_units,scale=quiver_scale,color=badcolor,linewidth=1,alpha=badalpha)
axs[2].quiver(xpm[sky],ypm[sky],dx3[sky],dy3[sky],units=quiver_units,scale=quiver_scale,color=skycolor,alpha=skyalpha)
axs[2].quiver(xpm[other],ypm[other],dx3[other],dy3[other],units=quiver_units,scale=quiver_scale,color=othercolor,alpha=otheralpha)
if showflagged: axs[2].quiver(xpm[flagged],ypm[flagged],dx3[flagged],dy3[flagged],units=quiver_units,scale=quiver_scale,color=flaggedcolor,alpha=flaggedalpha,label="FLAGGED")

axs[2].text(-410,420,"for offset<{}\nrms(x)={:4.3f}\nrms(y)={:4.3f}".format(maxoffset,rmsx3,rmsy3),verticalalignment="top",fontsize="small")
arrow(axs[2])
plt.show()
