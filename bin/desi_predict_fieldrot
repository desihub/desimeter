#!/usr/bin/env python

import argparse
import sys,os
import numpy as np
import fitsio

from desimeter.log import get_logger
from desimeter.fieldmodel import fieldrot,dfieldrotdt
from desimeter.time import mjd2lst
from desimeter.io import read_hexrot_deg

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Predict the field rotation. Need an input fits header or ra,dec,lst,mjd or ra,dec,ha,mjd or ra,dec,mjd (with decimal mjd to guess the lst)""")

parser.add_argument('--ra', type = float, default = None, required = False,
                    help = 'RA in deg')
parser.add_argument('--dec', type = float, default = None, required = False,
                    help = 'Dec in deg')
parser.add_argument('--lst', type = float, default = None, required = False,
                    help = 'LST=HA+RA in deg')
parser.add_argument('--ha', type = float, default = None, required = False,
                    help = 'HA=LST-RA in deg')
parser.add_argument('--mjd', type = float, default = None, required = False,
                    help = 'MJD in days')
parser.add_argument('--hexrot-arcsec', type = float, default = 0., required = False,
                    help = 'hexapod rotation angle in arcsec')
parser.add_argument('--fits-header', type = str, default = None, required = False,
                    help = 'Fits header filename with all of the above (with DESI keywords)')


args = parser.parse_args()
log  = get_logger()

ra=None
dec=None
lst=None
mjd=None
hexrot_deg=0

if args.fits_header is not None :
    header  = fitsio.read_header(args.fits_header,0)
    if not "TARGTRA" in header :
        log.warning("no TARGTRA in header of HDU 0, try HDU 1")
        header  = fitsio.read_header(args.fits_header,1)
        if not "TARGTRA" in header :
            log.error("no TARGTRA in headers of HDU 0 or 1 of file {}".format(args.fits_header))
            sys.exit(12)

    ra  = header["TARGTRA"]
    dec = header["TARGTDEC"]
    mjd = header["MJD-OBS"]
    if "TCSST" in header :
        vals=header["TCSST"].split(":")
        lst = (float(vals[0])+float(vals[1])/60.+float(vals[2])/3600.)/24.*360. # deg
        # just checking
        #lst_bis = mjd2lst(mjd)
        #print(lst,lst_bis)
    else :
        lst = mjd2lst(mjd)

    if "HEXPOS" in header :
         hexrot_deg = read_hexrot_deg(header)

else :
    ra  = args.ra
    dec = args.dec
    mjd = args.mjd
    if lst is None and args.lst is not None :
        lst = args.lst
    if lst is None and args.ha is not None :
        lst = ra+args.ha
    if lst is None :
        lst = mjd2lst(mjd)
    if args.hexrot_arcsec != 0 :
        hexrot_deg = args.hexrot_arcsec/3600.

if ra is None or dec is None or mjd is None or lst is None :
    print("missing argument(s), try --help")
    sys.exit(12)

print("FIELDROT    = {:4.3f} deg".format( fieldrot(ra=ra,dec=dec,lst_deg=lst,mjd=mjd,hexrot_deg=hexrot_deg)))
print("DFIELDROTDT = {:4.3f} arcsec/min".format( dfieldrotdt(ra=ra,dec=dec,lst_deg=lst,mjd=mjd)))
