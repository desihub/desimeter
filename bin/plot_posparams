#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Plots fiber positioner parameters as best-fit by fit_posparams. Also plots
cumulative positioner errors over time, as calculated when performing those
best-fits.
"""

# command line argument parsing
import argparse
import math
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('-i', '--infiles', type=str, required=True, nargs='*',
                    help='path to input csv file(s) containing results from fit_posparams. ' \
                         'Regex ok (like M*_paramfits.csv). Multiple file args also ok (like ' \
                         'M0001_paramfis.csv M0002_paramfits.csv M01*.csv)')
parser.add_argument('-o', '--outdir', type=str, required=True,
                    help='path to directory where to save output plot files')
parser.add_argument('-np', '--n_processes_max', type=int, default=None,
                    help='max number of processors to use')
parser.add_argument('-t', '--test_mode', action='store_true',
                    help='test mode, only plots results for the first positioner')
parser.add_argument('-sb', '--skip_bestfits', action='store_true',
                    help='skip generating plot of best-fit results for each positioner')
parser.add_argument('-sp', '--skip_passfail', action='store_true',
                    help='skip generating single plot binning historical pass/fail for all positioners (also saves bins as json)')
parser.add_argument('-b', '--bins', default=[0, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1.0, math.inf],
                    help='set error bins, int or sequence, works approx like "bins" arg of numpy.hist() function (c.f. desimeter/posparams/plotter.py)')
parser.add_argument('-d', '--dynamic_passfail', action='store_true',
                    help='uses "dynamic" best-fit error (variable SCALE_T and SCALE_P) for pass/fail binning')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='extra verbosity of print outs at terminal')
args = parser.parse_args()

# proceed with the rest
import os
import multiprocessing
import json
import gzip
import glob
from astropy.table import Table
from astropy.table import vstack
from astropy.time import Time

# imports below require <path to desimeter>/py' to be added to system PYTHONPATH. 
import desimeter.posparams.plotter as plotter
import desimeter.posparams.fitter as fitter

# verbosity control
if args.verbose:
    printf = print
else:
    def printf(*args, **kwargs):
        pass    

# paths
infiles = []
for s in args.infiles:
    these = glob.glob(s)
    infiles.extend(these)
infiles = [os.path.realpath(p) for p in infiles]
save_dir = os.path.realpath(args.outdir)
if not os.path.isdir(save_dir):
    os.path.os.makedirs(save_dir)
    
# read in data tables and stack into one
tables = []
print(f'Reading {len(infiles)} input files...')
required = {'POS_ID', 'DATA_END_DATE_SEC', 'ANALYSIS_DATE_STATIC'}
for d in plotter.param_subplot_defs:
    required |= set(d['keys'])
for path in infiles:
    if 'csv' in os.path.splitext(path)[-1]:
        this_table = Table.read(path, format='csv')
        missing = required - set(this_table.columns)
        if any(missing):
            f'Skipping data at {path}, missing some values'
        tables += [this_table]
table = vstack(tables)
table.sort(['POS_ID', 'DATA_END_DATE_SEC'])
analysis_timestamp = Time(min(table['ANALYSIS_DATE_STATIC'])).iso.split('.')[0]
analysis_timestamp_for_filename = Time(analysis_timestamp).isot.replace('-','').replace(':','')[:-4]

if not args.skip_passfail:
    mode = 'dynamic' if args.dynamic_passfail else 'static'
    prefix = os.path.join(save_dir, analysis_timestamp_for_filename + '_passfail_' + mode)
    plot_path = prefix + plotter.img_ext
    binned = plotter.bin_errors(table, bins=args.bins, mode=mode, printf=printf)
    title_lines = ['POSITIONER PASS/FAIL COUNTS']
    title_lines += [f'Errors (rms) calculated by best-fit of {mode.upper()} calib params.']
    title_lines += [f'Best-fits analysis date: {analysis_timestamp}']
    n_pts = table['NUM_POINTS']
    title_lines += [f'Data windows num points: max={max(n_pts):5.1f}, min={min(n_pts):5.1f}, mean={n_pts.mean():5.1f}']
    time_windows_sec = table['DATA_END_DATE_SEC'] - table['DATA_START_DATE_SEC']
    time_windows_day = time_windows_sec / 60 / 60 / 24
    title_lines += [f'Data windows num days:   max={max(time_windows_day):5.1f}, min={min(time_windows_day):5.1f}, mean={time_windows_day.mean():5.1f}']
    max_line_len = max(len(line) for line in title_lines)
    align = lambda string: format(string, str(max_line_len) + 's')
    title = '\n'.join([align(line) for line in title_lines])
    plotter.plot_passfail(binned, savepath=plot_path, title=title, printf=print)
    binned_path = prefix + '.json.gzip'
    with gzip.open(binned_path, 'wt', encoding='ascii') as zipfile:
        json.dump(binned, zipfile)
    print(f'Pass/fail binned data saved to: {binned_path}')

if __name__ == '__main__' and not args.skip_bestfits:
    posids = sorted(set(table['POS_ID']))
    num_posids = len(posids)
    num_plots = num_posids if not args.test_mode else 1
    posids_to_plot = [posids[i] for i in range(num_plots)]
    mp_results = {}
    with multiprocessing.Pool(processes=args.n_processes_max) as pool:
        for posid in posids_to_plot:
            subtable = table[table['POS_ID'] == posid]
            some_row = subtable[0]
            statics_during_dynamic = {key:some_row[key + '_DYNAMIC'] for key in fitter.static_keys}
            save_path = os.path.join(save_dir, posid + '_paramfits' + plotter.img_ext)
            save_path = os.path.realpath(save_path)
            plot_args = (subtable, save_path, statics_during_dynamic)
            pool.apply_async(plotter.plot_params,
                             args=plot_args,
                             callback=print)
            print(f'Plot job added: {posid}')
        pool.close()
        pool.join()
