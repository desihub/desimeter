#!/usr/bin/env python

import os,sys
import psycopg2
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table
import datetime
import argparse

from desimeter.util import parse_fibers
from desimeter.dbutil import dbquery,get_petal_ids,get_pos_ids,get_petal_loc

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Retrieve data from posmove DB and save to disk as CSV table""")

parser.add_argument('--host', type= str, required=False, default='db.replicator.dev-cattle.stable.spin.nersc.org', help="db.replicator.dev-cattle.stable.spin.nersc.org for kpno or beyonce.lbl.gov for petaltest")
parser.add_argument('--port', type= int, required=False, default=60042, help="60042 for kpno or 5432 for petaltest")
parser.add_argument('--password', type= str, required=False, default=None, help="nothing for kpno")
parser.add_argument('--petal-ids', type= str, required=False, default=None, help="comma separated list of petal ids")
parser.add_argument('--exposure-ids', type= str, required=False, default=None, help="comma separated list of exposure ids")
parser.add_argument('--exposure-iters', type= str, required=False, default=None, help="comma separated list of exposure iters")
parser.add_argument('--date-min', type = str, default = "2019-01-01", required = False, help="date min with format YYYY-MM-DD")
parser.add_argument('--date-max', type = str, default = "2030-01-01", required = False, help="date max with format YYYY-MM-DD")
parser.add_argument('--pos-ids', type= str, required=False, default=None, help="comma separated list of positioner ids (same as DEVICE_ID)")
parser.add_argument('-o','--outdir', type = str, default = "None", required = True, help="output directory where MXXXX.csv files are saved")
parser.add_argument('--with-calib', action = 'store_true', help="add matching calib from db")
parser.add_argument('--recent-rehome-exposure-ids', type= str, required=False, default=None, help="comma separated list of exposure ids where the positioners have been recently rehomed")

args  = parser.parse_args()

# example: get_posmoves --host beyonce.lbl.gov --port 5432 --password XXXX --petal-ids 1 --exposure-ids 2107 --exposure-iters 0,1,2,3,4,5,6,7,8,9,10,11 --outdir tmp --nocalib --pos-id M02155

# open connection
comm = psycopg2.connect(host=args.host,port=args.port, database='desi_dev', user='desi_reader',password=args.password)


if args.petal_ids is not None :
    petalids = parse_fibers(args.petal_ids)
else :
    petalids = get_petal_ids(comm)

recent_rehome_exposure_ids=list()
if args.recent_rehome_exposure_ids is not None :
    recent_rehome_exposure_ids=[int(val) for val in args.recent_rehome_exposure_ids.split(",")]

for petalid in petalids :

    if args.pos_ids is not None :
        posids = args.pos_ids.split(",")
    else :
        posids = get_pos_ids(comm, petalid)

    petal_loc = get_petal_loc(petalid)

    for posid in posids :

        # read data from db
        cmd = "select * from posmovedb.positioner_moves_p{} where pos_id='{}' and time_recorded BETWEEN date '{}' and date '{}'".format(int(petalid),posid,args.date_min,args.date_max)
        if args.exposure_ids is not None :
            cmd += " and exposure_id in ({})".format(args.exposure_ids)
        if args.exposure_iters is not None :
            cmd += " and exposure_iter in ({})".format(args.exposure_iters)
        posmoves=dbquery(comm,cmd)

        # add petal loc
        posmoves["PETAL_LOC"] = np.repeat(petal_loc,len(posmoves["petal_id"]))

        # make sure there is no comma in log_note
        for i in range(len(posmoves["log_note"])) :
            if posmoves["log_note"][i] is not None:
                posmoves["log_note"][i]=str(posmoves["log_note"][i]).replace(",",";")

        if args.with_calib :

            # adding calib info
            cmd="select * from posmovedb.positioner_calibration_p{} where pos_id='{}' order by time_recorded".format(int(petalid),posid)
            print(cmd)
            calib=dbquery(comm,cmd)

            # get time stamps to match
            tstamp_calib     =  np.array([d.timestamp() for d in calib["time_recorded"]])
            tstamp_posmovedb =  np.array([d.timestamp() for d in posmoves["time_recorded"]])

            rename_keys={'time_recorded':'calib_time_recorded'}

            new_keys=list()
            for k in calib.keys() :
                if k in rename_keys.keys() :
                    new_keys.append(rename_keys[k])
                else :
                    new_keys.append(k)

            for k in new_keys :
                posmoves[k]=list()

            for t in tstamp_posmovedb :
                j=np.where(tstamp_calib<t)[0][-1]
                for k1,k2 in zip(new_keys,calib.keys()) :
                    posmoves[k1].append(calib[k2][j])

        # save, using astropy.Table io

        # by default convert keys to upper case,
        # but with special cases (of course),
        rename_keys={
            'obs_x':'X_FP',
            'obs_y':'Y_FP',
            'time_recorded':'DATE',
            'calib_time_recorded':'CALIB_DATE',
        }

        otable = Table()
        for k in posmoves.keys() :

            if k in rename_keys.keys() :
                k2=rename_keys[k]
            else :
                k2=k.upper()

            otable[k2]=np.array(posmoves[k])

        otable["RECENT_REHOME"]=np.in1d(otable["EXPOSURE_ID"],recent_rehome_exposure_ids).astype(int)

        if not os.path.isdir(args.outdir) :
            os.makedirs(args.outdir)
        ofilename="{}/{}.csv".format(args.outdir,posid)
        otable.write(ofilename,overwrite=True)
        print("wrote",ofilename)
